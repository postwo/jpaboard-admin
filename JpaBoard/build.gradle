plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// security test코드를위해 추가
	testImplementation 'org.springframework.security:spring-security-test'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// 타임리프
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// Spring Configuration Processor == 이거는 설정파일을 등록하기 위해사용 JpaBoardApplicationTests에서 lombok에설정한거 보면 된다
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//api 문서화를 위해 추가 //swagger-ui.html
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'


	// 스프링 부트 3.0 미만
//	implementation "com.querydsl:querydsl-jpa"
//	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정

	// 스프링 부트 3.0 이상
//	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
//	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"


	// queryDSL 설정
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"// querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드

}

tasks.named('test') {
	useJUnitPlatform()
}

// 밑의 내용들을 추가한 이유(Q클래스 위치를 밖으로 꺼내는이유)는 인텔리제이랑 gralde이 빌드 하다가 충돌이 일어날수도 있기 때문에 추가한거다 밑의 내용이 없어도 querydsl 동작한다.

// Querydsl 설정부 = 이거는 src/main 밑의다가 generatedf를 생성한다는 뜻이다 = Q클래스를 여기경로로 꺼내서 보기위해 이렇게 설정 == 잠제적인 오류를 피하기 위해서 이렇게 사용
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제 == gradle은 src/main/generated이 위치를 모르기 때문에 가르쳐 준다고 생각하면 된다
clean {
	delete file(generated)
}